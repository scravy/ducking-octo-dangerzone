@margins 2.25cm 4cm 2.25cm 4cm
@endnotes

=   Introduction
label sec:introduction

==  Motivation

right
    *The crazy think is we still are extremely bad at fitting things
     together \break
     -- still the best way of fitting things together is the unix pipe*
    \break -- //Joe Armstrong//\^^http://erlang.org/pipermail/erlang-questions/2013-January/071944.html January 2013, Joe Armstrong in an email^
    \break \space
reset

    Haskell and Java are two very different programming languages.
    Haskell is typically compiled to native binaries, whereas
    Java is run in a virtual machine. Haskell is a non-strict language
    with immutable data, whereas Java is a strict language with
    mutable data. The people having an interest in Haskell are mostly
    from an academic background, the Java community is largely rooted
    in the industry.

    Both languages have their strengths and weaknesses. Haskell is a
    very well designed language with strong guarantees about the
    validity of resulting applications. It is however rather complicated
    to reason about the performance of a particular piece of code,
    since Haskell is such a powerful abstraction that the underlying
    machine almost vanishes behind a pure model of computation.

    Java is the culmination of decades of engineering in imperative
    programming with a huge community and a large set of available
    libraries. The language however is rather bloated. Java is also
    very roomy, by which is meant that Java allows anything to happen
    at any time.
    As an impure language certain actions like
    writing to \#stdout#, or creating a file in the file system can not
    be prevented from happening.

    It would be quite beneficial for both camps to have a means of
    interfacing with each other: There are libraries for almost
    everything written in Java, which one might want to use in Haskell.
    On the other hand, certain applications are definitely far easier
    and robust to be written in Haskell (parsers are a canonical
    example), and it might be desirable to outsource parts of a Java
    project to Haskell.


==  Scope of this document

    In this paper a tool is presented which allows for binding Haskell
    applications to Java applications and vice versa.
    Because of the vast differences between Haskell and Java
    -- especially relating to their type systems --
    a closer investigation of these differences is conducted.


==  Organization of this document

    In section \<sec:comparison> the Haskell and Java programming
    languages are described and compared. The parts that are especially
    interesting regarding our goal of creating a tool that automatically
    creates bindings between applications and libraries written in
    these two languages are paid attention foremost.

    How the interface of a Java library could be translated into Haskell
    such that it looked like a Haskell library and vice versa is
    discussed in the next section, section \<sec:translation>. These
    observations are then used and refined to build the *java-bridge*
    in section \<sec:library>,
    a library that supports invoking Java code from within a Haskell
    application. It also supports the creation of *bindings*, i.e.
    auto-generated code that can be used by a Haskell application to
    interface with a Java application, without actually talking Java.
    The java-bridge is used in section \<sec:examples> to demonstrate
    how a Haskell programmer could use the Java standard library without
    leaving the Haskell programming language: (1) A GUI application
    utilizing the Java Swing UI Toolkit and (2) a database application
    using the *Java database connectivity* (JDBC).

    We conclude with a final evaluation of the usability and efficiency
    of the tool created.

    Footnotes are realized as endnotes and uniquely numbered throughout
    this document.


