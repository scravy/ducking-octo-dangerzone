=== Haskell extensions being used

    While the low level interface is portable to all Haskell compilers
    that support the Foreign Function Interface, the medium level
    interface makes use of some extensions of the Haskell language.
    It is not necessary to do so, but greatly enhances the usability
    of the resulting API.

    The extensions being used are:

:   MultiParamTypeClasses: \space \break
    Type classes with multiple parameters effectively describe
    relations between types. They are used in the medium level interface
    to ensure that a given Haskell function corresponds to the
    description of a given Java method. Examples of the use of
    multi parameter type classes can be seen in the contexts
    of \#callMethod#, \#bindMethod#, etc\^
        GHC User's Guide, Version 7.6.2, § 7.6.1.1 Multi-parameter type classes
        ^.

:   FunctionalDependencies: \space \break
    Multi parameter type classes are amlost unusable without some kind
    of assistance for the type inference engine. Functional depencies
    provide that assistance. Most prominently, functional dependencies
    can fix the type of one parameter of a type class by making it
    depend on another. This is used in the definition of the function
    \#getMethod#, \#callMethod#, \#callMethodE#, etc\^
        GHC User's Guide, Version 7.6.2, § 7.6.2 Functional dependencies
        ^.

:   FlexibleInstances: \space \break
    Many instance declarations can simply not be given without
    flexible instances, especially in the context of multi parameter
    type classes. Specifically flexible instances are needed to
    provide instances for method descriptors, see section
    \<sec:methodDescriptors>\^
        GHC User's Guide, Version 7.6.2, § 7.6.3.1 Relaxed rules for the instance head
        ^.
    
:   FlexibleContexts: \space \break
    If you want to mention a flexible instance in a context of
    a function, instance, or type class declaration you need
    also flexible contexts\^
        GHC User's Guide, Version 7.6.2, § 7.6.3.1 Relaxed rules instance contexts
        ^.

:   UndecidableInstances: \space \break
    While the name is rather scary, this extension just lifts a
    constraint from the definition of type classes and class
    instances, which may lead to undecidable instances -- i.e.
    it becomes possible to write instances of which it can not
    be decided whether there is one for a certain type or not.
    The bad thing that could happen is that the type checker is sent to
    an infinite loop. Since the java-bridge library does compile,
    this is obviously not the case\^
        GHC User's Guide, Version 7.6.2, § 7.6.3.3 Undecidable instances
        ^.

    These extensions are known to be supported not only by GHC,
    but also by Hugs\^The Hugs 98 User Manuel § 7 An overview of Hugs extensions ^
    (in fact some of them originated there).


=== The Java Monad

    As described in section \<sec:javaMonad> every action that is executed
    in the JVM should be encapsulated in a custom monad, the Java monad.
    The medium level interface defines that monad and offers the
    function \#runJava#.

small
::  runJava\space: \#Java a -> IO a#
::  runJava': \#[String] -> Java a -> IO a#
reset

    \#runJava# will internally call \#createVM# and \#destroyVM# from the
    low level interface. \#runJava'# uses \#createVM'# instead and allows for
    some additional arguments to the JVM, for example:

.haskell
    runjava' ["-Djava.class.path=/java"] javaAction
.
    This is the implementation of \#runJava'#:

.haskell
    runJava' opts f = do

        str <- mapM newCString (augmentOpts opts)
        ptr <- newArray str
        vm  <- JNI.createVM' (fromIntegral $ length str) ptr

        mapM_ free str >> free ptr

        if vm == nullPtr then do
                                libjvmPath <- JNI.getLibjvmPath >>= peekCString
                                throw $ JvmException libjvmPath opts
                         else return ()
         
        (result, _) <- finally (runStateT (_runJava f) (newJVMState vm))
                               (JNI.destroyVM vm)

        return result
.

    It is also possible to initialize the virtual machine once
    in a Haskell process. The JVM will then live as long as the
    Java process. When initialized using \#initJava#, \#runJava#
    will not automatically tear down the virtual machine after
    the last thread executed actions it:

small
::  initJava: \#[String] -> IO ()#
reset

    As mentioned in section \<sec:osxIssues>, Mac OS X has some
    special requirements on GUI applications. It is therefore
    necessary to run the Java monad using \#runJavaGui#. On all
    other platforms \#runJavaGui# does exactly the same as
    \#runJava#, it is therefore safe and still portable to always call
    \#runJavaGui#.

small
::  runJavaGui\space: \#Java a -> IO ()#
::  runJavaGui': \#[String] -> Java a -> IO ()#
reset

figure
.java
    import Foreign.Java

    main = runJava $ do
        (Just threadClass) <- getClass "java.lang.Thread"
        currentThread <- threadClass `bindStaticMethod`
                           "currentThread" ::= object "java.lang.Thread"
        getName <- threadClass `bindMethod` "getName" ::= string

        (Just thread) <- currentThread
        (Just name) <- getName thread

        io$ putStrLn name
caption Exemplary usage of {\ttfamily runJava}
endfigure

:=  Implementation:
    The Java monad is a State monad transformer that wraps the
    IO monad. The state of that monad is a value of type \#JVMState#.

.haskell
    newtype Java a = Java { _runJava :: StateT JVMState IO a }
      deriving (Monad, MonadState JVMState, Functor, MonadIO)
    
    data JVMState = JVMState {
        -- | The actual pointer to the virtual machine.
        jvmPtr :: Ptr Core.JVM,

        -- some more fields. They actually only serve for the
        -- caching of frequently used method IDs and are
        -- omitted here for brevity.
    }
.
    Note that this definition requires the \#GeneralizedNewtypeDeriving#
    extension. One can omit the usage of this extension and implement
    the \#return# and \#bind (>>=)# functions by hand
    (after all, it is a simple state monad).


=== Method and Field Descriptors
label sec:methodDescriptors
    
    The low level interface requires the programmer to
    explicitly request method or field IDs using method
    and field descriptors that look like the internal format
    of method and field descriptors in class files, i.e. strings
    like \break
    \#(JJ[IZLjava/lang/Object;[Ljava/util/reflect/Type;)J# \space.

figure
.haskell
    data MethodDescriptor p = String ::= p

    (-->) :: a -> x -> P a x
    a --> x = P a x

    infixr 9 -->
    infixl 8 ::=

    data Z = Z          ; boolean = Z
    data C = C          ; char    = C
    data B = B          ; byte    = B
    data S = S          ; short   = S
    data I = I          ; int     = I
    data J = J          ; long    = J
    data F = F          ; float   = F
    data D = D          ; double  = D
    data L = L String   ; object  = L
    data V = V          ; void    = V
    data A x = A x      ; array   = A
    data X = X          ; string  = X

    data P a x = P a x
.
caption The MethodDescriptor datatype.
endfigure

    These method descriptors are highly inconvenient to use.
    Furthermore they do not feature any type safety, since in principle
    any string can be used to request an ID from the JVM.
    The medium level interface remedies this by introducing a dedicated
    datatype \#MethodDescriptor#\^
        Defined in Foreign.Java.Types and Foreign.Java.JNI.Types^.
    A \#MethodDescriptor# is a value of the
    form \#String ::= p# where \#p# is the signature of a Java method.
    Signatures are represented as a value of the types \#Z#, \#C#, \#B#,
    \#S#, \#I#, \#J#, \#F#, \#F#, \#L#, \#V#, \#A#, \#X#, or \#P#. These
    are translations from the low level method descriptors into the
    Haskell type system. Since these capital letters are a bit
    unintuitive aliases are introduced: \#boolean#, \#char#, #byte#, etc.
    It is worth noting that \#A# and \#X# actually do not exist in
    the JNI. \#A# is a translation of \#[# and denotes arrays, \#X# is
    an alias for \#L "java.lang.String"# and is needed for the
    special support for strings that is offered by the low level interface
    and of course by the medium level interface too.

    The list of parameters to a function is church encoded, using
    \#P# as \#Cons# operator (*P* is for *pair*). \#--># is a more
    readable alias for \#P#.
    It is now possible to give type safe method descriptors:

small

>!  Name
>!  Low and Medium Level Method Descriptor
>-

>   main
>#  ([Ljava/lang/String;)V
>+
>
>#  "main" ::= array string --> void

>-
>   indexOf
>#  ([Ljava/lang/Object;)I  
>+
>
>#  "indexOf" ::= array (object "java.lang.Object") --> int

>-
>   plus
>#  (LL)L
>+
>
>#  "plus" ::= long --> long --> long

>+
reset

    Method descriptors are being used by the functions \#getMethod#,
    \#getStaticMethod#, \#bindMethod#, and \#bindStaticMethod#.
    The \#getMethod#/\#getStaticMethod# functions return a \#JMethod p#
    or a \#JStaticMethod p# respectively where \#p# is the type of the
    method.

    The functions \#bindStaticMethod#, \#bindMethod#, \#callStaticMethod#,
    and \#callMethod# all have a type like the following:

.ascii
    MethodCall p b => p -> b
.
    \#p# is the type of the function, i.e the \#p# in \#String ::= p#
    or the \#p# in \#JMethod p#. \#MethodCall# is a type class that
    takes two parameters with a functional dependency that deduces
    the type of \#b# from \#p#. This way the above functions will
    themselves generate functions that correspond to the given type \#p#:

small
>!  Method Descriptor (without Name)
>!  Type
>!  Resulting Function
>-

>   object "java.lang.String" --> int
>   P (L I)
>   Maybe JObject -> Java Int32

>+

>   char --> int --> string
>   P C (P I X)
>   Word16 -> Int32 -> Java String

>+

>   void
>   V
>   Java ()

>+

>   string --> object "java.util.TreeMap"
>   P (X L)
>   String -> Java (Maybe JObject)

reset

    It is worth noting that this mechanism discards the actual type
    of the object (i.e. \#java.util.TreeMap# in the last example
    in the table above). The problem is that we can not deduce a
    type from the string that specifies the name of the class
    other then \#[Char]#. We could of course create type level names
    like
small
    \#J (A (V (A (Dot (U (T (I (L (Dot (T_ (R (E (E (M_ (A (P Stop))))))))))))))))#
reset
    But that would hardly be useful at all\^^http://hackage.haskell.org/package/names
        Albeit I have created a package which offers type level names
        encoded like here which achieves usability by using the TemplateHaskell
        extension to create type level names from strings.^.


=== References

    The low level interface requires the programmer to deal
    with pointers and global references which have to be freed
    manual. Pitfalls like null pointers or unsafe array access
    lurk everywhere in the low level interface, just as they do
    in C. To prevent this from happening the medium level
    interface encapsulates pointers and references via \#newtype#
    declarations so that the complexity of the underlying low
    level interface is hidden. Methods dealing with these new
    datatypes will only perform safe operations or provide
    methods for handling errors (other than segfaulting).

    Specifically these new datatypes are\^
        Defined in Foreign.Java.Types^:

.haskell
    -- | A reference to an arbitrary Object.
    newtype JObject = JObject { jobjectPtr :: ForeignPtr JObjectRef }

    -- | A reference to a Class object.
    newtype JClass = JClass { jclassPtr :: ForeignPtr JClassRef }

    -- | A reference to an Exception.
    newtype JThrowable = JThrowable { jthrowablePtr :: ForeignPtr JThrowableRef }

    -- | A reference to an Array in the JVM.
    data JArray e = JArray {
        jarrayLength :: Int32,
        jarrayPtr :: ForeignPtr JObjectRef
      }
.
    The functions in the medium level interface all guarantee
    that values of these types never represent a null reference.
    Furthermore all of the internal references are \#ForeignPtr#
    instead of \#Ptr#. \#ForeignPtr# have an associated finalizer
    which will be triggered when the Haskell runtime system
    garbage collects the \#ForeignPtr#.


=== Callbacks
label sec:callbacks

    For properly using a Java library from within Haskell (such as Swing)
    it is crucial to be able to pass callbacks from Haskell to Java.
    For example we would like to pass an \#ActionListener# to the
    \#addActionListener(ActionListener l)# method of a \#javax.swing.JButton#.
    In Java this is usually done by creating an anonymous class:

.java
    button.addActionListener(new ActionListener() {
        public void actionPerformed(ActionEvent e) {
            // do Something
        }
    });
.
    We would like to do the same. In order to so so we will have
    to create an ActionListener. Fortunately Java does have a tool
    for this: *dynamic proxy classes*.

    From the documentation on \#java.lang.reflect.Proxy#: \break
    *A //dynamic proxy class// (simply referred to as a proxy class below)
     is a class that implements a list of interfaces specified at runtime
     when the class is created, with behavior as described below.
     [...] A //proxy instance// is an instance of a proxy class.*\^
        Java Platform Standard Edition 6, java.lang.reflect.Proxy^

    We would like to pass a *proxy instance* of \#ActionListener#
    to the \#addActionListener# method. For doing so we need a
    \#java.lang.reflect.InvocationHandler# that delegates the
    invocations to a Haskell function. Furthermore we need to export
    a Haskell function from the Haskell runtime so that it can be called
    from the outside.

    The \#InvocationHandler# interface specifies a single method:

    \#Object invoke(Object proxy, Method method, Object[] args)\#.

    We can define an equivalent function in Haskell:

    \#invoke :: JObject -> JObject -> JObject -> Java (Maybe JObject)#

    Unfortunately this function can not be exported by the FFI,
    since every type that is mentioned in a signature needs to be a
    primitive type (\#Int32#, #Char#, ...), a pointer (\#Ptr#),
    or it must be isomorphic to one of these types (\#newtype X = X Int32#).

    If we use the low level interface instead we can create
    a function that can be exported by the FFI:

.haskell
    invoke :: Ptr JObjectRef -> Ptr JObjectRef -> Ptr JObjectRef -> IO (Ptr JObjectRef)
.
    This function is also returning a result in the IO monad instead
    of the Java monad. This is necessary since the allowable return
    types for functions that are exported by the FFI are only the
    types which can be used as arguments or any of these types encapsulated
    in the IO monad.

    We will refer to the type of this function as \#WrappedFunc# as we
    are going to pass it through a *wrapper* function:

.haskell
    type WrappedFunc = Ptr JObjectRef -> Ptr JObjectRef -> Ptr JObjectRef -> IO (Ptr JObjectRef)
.
    This function can be exported by a *dynamic wrapper*\^
        Haskell 2010 Language Report § 8.5.1 Standard C Calls -- dynamic wrapper^:

.haskell
    foreign import ccall safe "wrapper"
        wrap :: WrappedFunc -> IO (FunPtr WrappedFunc)
.
    In order to dynamically implement a Haskell interface using a
    proxy class we need to pass a wrapped function to a special
    Java class that creates a *proxy instance* from this function.
    We are going to call this class \#HFunction#. This class will
    also implement the \#InvocationHandler# and doing the actual
    calling back.

    The \#HFunction# class looks like this:

#java ../java-bridge/HFunction.java
.
    A shortcoming of Java and the JNI is that there is no
    way of representing a function pointer (whereas both C and Haskell
    have such a thing -- \#FunPtr# in Haskell). It is therefor
    necessary to cast the function pointer obtained by \#wrap#
    into an integer and pass that integer to the virtual machine.
    This is considered bad practice in the C community and it is
    not covered by the C standard (functions and data could be
    separated and have completely different implementations, for example
    in a machine with *Harvard architecture*).

    Being able to cast integers to function pointers is however
    covered by the POSIX standard, and it is also guaranteed to
    work in Windows. It is in fact part of the Win 32 API,
    for example for loading dynamic libraries. Here is the part
    of the java-bridge which dynamically loads the \#libjvm# library
    (in Windows):

.code
    HINSTANCE hVM = LoadLibrary(_libjvm_path);
    if (!hVM) {
        return -41;
    }
    _GetCreatedJavaVMs =
        (jint (*)(JavaVM**,jsize,jsize*))
        GetProcAddress(hVM, "JNI_GetCreatedJavaVMs");
    _CreateJavaVM =
        (jint (*)(JavaVM**,void**,void*))
        GetProcAddress(hVM, "JNI_CreateJavaVM");
.
    This snippet requires casting integers to a function pointers
    (the very same example could be given in POSIX, looking only
    slightly different).   
    
    Now that we have put an end to all uncertainty at this point,
    we can move on and create a function \#implementInterfaceBy#\^
        Defined in and exported by Foreign.Java.Bindings^
    which uses a function like the first proposal for an invoke function,
    creates a \#WrappedFunc# from it, wraps it using \#wrap_# and
    passes it to \#HFunction.makeFunction#, which returns a
    \#proxy instance# for the class specified by its name:

label func:implementInterfaceBy
.haskell
    type InterfaceFunc = JObject -> JObject -> JObject -> Java (Maybe JObject)

    foreign import ccall safe "wrapper"
        wrap_ :: WrappedFunc -> IO (FunPtr WrappedFunc)

    implementInterfaceBy :: String        -- ^ name of the interface to be implemented
                         -> InterfaceFunc -- ^ implementation for @invoke@
                         -> Java JObject  -- ^ A proxy instance
    implementInterfaceBy ifaceName func = do
        iface <- getClass ifaceName >>= asObject . fromJust
        (Just clazz) <- getClass "HFunction"
        success <- registerCallbacks clazz
        if success then return () else fail "JNI native methods could not be registered"
        makeFunction <- clazz `bindStaticMethod` "makeFunction"
            ::= object "java.lang.Class" --> long --> object "java.lang.Object"
        (Just impl) <- io (intify func) >>= makeFunction (Just iface)
        return impl
      where
        wrap :: InterfaceFunc -> IO (FunPtr WrappedFunc)
        wrap f = do

            let proxyFunc vm self method args = do
                    self'   <- Core.JObject <$> newForeignPtr JNI.release self
                    method' <- Core.JObject <$> newForeignPtr JNI.release method
                    args'   <- Core.JObject <$> newForeignPtr JNI.release args

                    jobj <- runJava vm (f self' method' args')

                    case jobj of
                        Nothing -> return nullPtr
                        Just (Core.JObject ptr) -> withForeignPtr ptr return

            wrappedFunc <- wrap_ proxyFunc

            return wrappedFunc

        -- Wrap a frunction and cast the resulting FunPtr to an Int64 (jlong)
        intify :: InterfaceFunc -> IO Int64
        intify = fmap (fromIntegral . ptrToIntPtr . castFunPtrToPtr) . wrap

        runJava :: Ptr Core.JVM -> Java a -> IO a
        runJava vm f = runStateT (_runJava f) (newJVMState vm) >>= return . fst
.
    Note that this implementation already uses \#getClass# and \#bindStaticMethod#
    from the medium level interface and turns \#InterfaceFunc# functions
    (which are in the style of the medium level interface) into proxy instances,
    not a \#WrappedFunc# -- \#WrappedFunc# is only used as an intermediate.

    A remark on invoke: The alert reader may wonder why a \#WrappedFunc#
    has three arguments while the \#call# method in \#HFunction# has only
    two arguments. The third argument (actually the first, but nevertheless
    an additional argument) is given by the JNI and references the calling
    class (if a native static function was called) or the calling object
    (if a native non-static function was called). The JNI also gives
    a pointer to the instance of the invoking JVM, which is why there is
    a new \#runJava# function defined within \#implementInterfaceBy#, which
    executes the action in the Java monad with that pointer.

    \#implementInterfaceBy# will also be used to allow Java classes to
    call Haskell code. This is discussed in section \<sec:invokingHaskell>.

    Using our new asset we can finally pass an \#ActionListener# to
    \#addActionListener#:

.haskell
    runJava $ do
        (Just jbuttonClass) <- getClass "javax.swing.JButton"
        (Just jbutton) <- newObject jbuttonClass

        addActionListener <- jbuttonClass `bindMethod`
            "addActionListener" ::= object "java.awt.event.ActionListener" --> void

        let handler :: InterfaceFunc
            handler _hfunc _method args = do
                -- handle the event, args contains an array
                -- with arguments, of which the first is an
                -- @ActionEvent@
                return ()

        implementInterfaceBy "java.awt.event.ActionListener" handler
            >>= addActionListener jbutton
.

    
=== Garbage Collection
label sec:garbageCollection
    
    The java-bridge library makes use of the Haskell 2010 type \#ForeignPtr#.
    These pointers are pointers with an associated finalizer. We have already seen
    the finalizer in the description of the low level interface (\#release#).

    Whenever a function in the medium level interface retrieves a pointer
    from the virtual machine, it creates a \#ForeignPtr# from it and returns
    that, encapsulated in a new type which hides the actual implementation.
    This way the programmer is freed from the burden of taking care of
    releasing references, the Haskell runtime system will do it.    

:=  Releasing function pointers: is also necessary. In section \<sec:callbacks>
    the \#HFunction# class was presented which is a Java equivalent
    for Haskell's \#FunPtr# (which the Java standard library unfortunately
    lacks). Java classes can have a \#finalize# method which is called
    when the garbage collector is freeing a class. The \#finalize#
    function in \#HFunction# will call the native static method \#release#
    in the HFunction class which takes as argument a function pointer
    (cast to a long). \#release# will have been registered by
    \#implementInterfaceBy# (page \(func:implementInterfaceBy)) via
    \#registerCallbacks# (page \(func:registerCallbacks)). \#release#
    is registered with a function that is exported by the Haskell
    part of the java-bridge library, \#freeFunPtr#\^
        Defined in and exported by Foreign.Java.Bindings^:

.haskell
    foreign export ccall freeFunPtr :: FunPtr WrappedFunc -> IO ()

    freeFunPtr :: FunPtr WrappedFunc -> IO ()
    freeFunPtr ptr = freeHaskellFunPtr ptr
.
    \#freeHaskellFunPtr# is provided by the Haskell FFI\^
        Defined in Foreign.Ptr^.


=== Concurrency
label sec:concurrency

    It is worth noting that programs that use the java-bridge library
    need to be compiled using a threaded Haskell runtime (In GHC this
    is induced by the \#-threaded# switch).

    Threads can be started within the Java monad using the
    \#forkJava# method. While in principle you could also use the
    functions provided by \#Control.Concurrent#, lifted into the Java
    monad using \#liftIO#, I recommend using the \#forkJava# function.
    It provides a clean and fail safe implementation for starting a thread
    in Haskell in the presence of a virtual machine. The important
    thing is, that \#forkJava# uses \#forkOS#, which spawns a *bound* thread.
    Threads in concurrent Haskell are lightweight threads which can be
    moved from one OS thread to another. Using lightweight threads may
    lead to conflicts between the Haskell runtime and the Java virtual
    machine.

    A Java method might be executed in one thread that uses
    for example Javas \#ThreadLocal# storage. If another method is invoked
    which tries to access that same storage, but from a different thread
    (the Haskell runtime might have moved the invoking lightweight thread
    to another OS thread) the thread local state will be lost (at least it
    is momentarily not accessible by this method).

    An implementation for \#forkJava# and \#waitJava# is:

.haskell
    newtype JavaThreadId a = JavaThreadId (MVar (Either SomeException a))

    forkJava :: Java a -> Java (JavaThreadId a)
    -- ^ A utility function for forking an OS thread which runs in the
    -- Java Monad. It will return a 'JavaThreadId' which you can wait on
    -- using 'waitJava'.
    forkJava t = io $ do
        lock <- newEmptyMVar
        _ <- forkOS $ do
            result <- try $ runJava t
            putMVar lock result
        return $ JavaThreadId lock

    waitJava :: JavaThreadId a -> Java (Either SomeException a)
    -- ^ Wait for a Java Thread to exit. If the thread exits abnormally
    -- (that is, if an exception occurred), this function will return
    -- @Left SomeException@. Otherwise it will return the result of the
    -- computation as @Right a@.
    waitJava (JavaThreadId mvar) = io $ takeMVar mvar
.

:=  Thread safety of function calls between runtimes: is already provided
    by the Haskell FFI. The foreign imports that access the C functions of
    the java-bridge library are marked as \#safe#, which tells the Haskell
    compiler to ensure that concurrent access is correctly synchronized
    with garbage collection etc. It is however only activated when compiled
    using a threaded runtime. If not, the virtual machine might invoke a
    Haskell function concurrently and thereby crash the runtime system of
    Haskell.

    Concurrent calls from a Haskell process into the virtual machine are
    safe in the sense that they do not crash the virtual machine. In
    all other aspect they work like an ordinary concurrent invocation
    from an arbitrary Java thread, hence the same problems as in ordinary
    Java programming may arise.

=== OS X Issues
label sec:osxIssues

    Graphical User Interfaces are implemented via Cocoa on Mac OS X.
    The port of AWT to Mac OS X is known as *CocoaAWT*. Both Cocoa and AWT
    do have distinct event queues. Cocoa has a
    requirement on the event queue which CocoaAWT inherits: The Cocoa event
    queue has to be running on the first thread\^^http://developer.apple.com
    -- Cocoa Threading Programming Guide, Version 2010-04-28^.
    If a Haskell process starts up, it will be the process running on the
    main thread. Initially it will be the only thread running.

    When starting up a virtual machine, the start up sequence is initiated on
    the main thread, but new threads will be created which are not the
    main thread. For example the JVM starts a thread for catching
    uncaught exceptions, another thread for garbage collection, etc.
    
    Both the AWT event queue as well as the
    Cocoa event queue are initially not running. When the first AWT
    action is executed in the JVM, the AWT event thread (the thread which
    handles the event queue) will be started up. If that first AWT action
    was issued by the main thread, CocoaAWT will detect that it has been
    invoked from the main thread where the Cocoa event queue should be
    running. CocoaAWT will therefore do the right thing and fail with an
    error:

footnotesize
.ascii
    wing[1883:707] Cocoa AWT: Apple AWT Java VM was loaded on first thread -- can't start AWT.
        0   liblwawt.dylib       0x0000000117e87ad0 JNI_OnLoad + 468
        1   libjava.dylib        0x00000001026076f1      Java_java_lang_ClassLoader_00024[...]
        2   ???                  0x000000010265af90 0x0 + 4335185808
    )
.
reset

    The solution is to manually initialize the AWT system on a
    thread other than the main thread. This will at least render
    a window -- and freeze. The reason for the freeze is that
    CocoaAWT assumes that a Cocoa event queue is already running
    on the main thread (Starting the Cocoa event queue normally is the very
    first thing a graphical application does). It therefore waits
    for events from the Cocoa event queue (events are handled by
    Cocoa and than delegated to CocoaAWT which handles them on the
    AWT event queue) which is not running at all! Thanks to the extremely
    dynamic nature of the Objective-C runtime (Cocoa is an Objective-C
    framework) we do not get an error or anything, the application just
    freezes as its request for gets lost and the AWT event queue will
    be blocked indefinitely.

    To ultimately solve the problem we have to do initialize the
    Cocoa event queue ourselves. The initialization of a the event
    queue is normally done when a Cocoa application starts up.
    The "Apple AWT Java VM" obviously does not do this by itself but
    assumes that this has already been done (probably since it is being
    invoked via libjvm instead of in standalone process). Therefore
    we try to be a good host and create the AWT event queue:

.code
    void* clazz = objc_getClass("NSApplication");
    void* app = objc_msgSend(clazz, sel_registerName("sharedApplication"));
    objc_msgSend(app, sel_registerName("run"));
.
    This piece of code is provided by the \#runCocoaMain# function
    which was presented in the low level interface.

    Since the Cocoa event queue will occupy the main thread
    once its started, we have to resort to another thread.
    Therefore a \#runJavaGui'# function is defined in the medium
    level interface, which transparently does that for us:
    
.haskell
    runJavaGui' opts java = runJava' opts $ do
        _ <- forkJava java
        io JNI.runCocoaMain
.

=== Exception Handling

    Each of the functions \#callMethod#, \#callStaticMethod#, \#newObject#,
    and \#newObjectFrom# come on three versions: as (using \#callMethod# exemplary)
    \#callMethod#, \#callMethodE#, and \#callMethodX# (i.e. plain, suffixed with \#X#,
    and suffixed with \#E#). The JNI requires that the programmer manually checks for
    exceptions, using \#exceptionCheck# (see low level interface). Both the plain version
    as well as the functions suffixed with \#E# will do this check. The plain version
    will call the Java monads \#fail# method if an exception occurred (i.e. re-raise
    the exception). The \#E# functions on the other hand always have the
    ultimate return type of \#Java (Either JThrowable a)# where \#a# is the type which
    would be returned by the plain version.

    The \#X# methods do not check for exceptions and should only be used
    if the programmer is sure that the invoked method will definitely not raise
    an exception.

figure
.haskell
    -- Will @fail@ in case of an exception.
    (Just thread) <- callStaticMethod currentThread

    -- thread' :: Either JThrowable (Maybe JObject)
    thread' <- callStaticMethodE currentThread
endfigure


=== Retrieving Classes, Fields, and Methods

small

::  getClass: \#(Monad m) => String -> Java (m JClass)# \break
    Find a Java class, return \#Nothing# it the class does not exist
    (Actually this function can be used with any monad, it will call the
    \#fail# function if the class does not exist, which in case of the
    \#Maybe# monad would be \#Nothing#).

::  getConstructor: \#(Monad m) => JClass -> a -> Java (m (JConstructor a))# \break
    Retrieve a constructor ID (encapsulated in a #JConstructor#) or fail
    (e.g. Nothing) if there is no constructor with the given signature.

::  newObject: \#JClass -> Java (Maybe JObject)# \break
    Create an object using the default constructor for a given class.
    If that constructor is not accessible, \#fail# (e.g. Nothing).
    \break Example: \#newObject stringClass >>= maybe (...fail...) (\x -> ...success...)#.

::  newObjectE: \#JClass -> Java (Either JThrowable (Maybe JObject))# \break
    \#E# variant of \#newObject#.

::  newObjectX: \#JClass -> Java (Maybe JObject)# \break
    \#X# variant of \#newObject#.

::  newObjectFrom: \#NewObject p b => JConstructor p -> b# \break
    Creates an object from a previously retrieves constructor.

::  newObjectFromE: \#NewObjectE p b => JConstructor p -> b# \break
    \#E# variant of \#newObjectFrom#.

::  newObjectFromX: \#NewObjectX p b => JConstructor p -> b# \break
    \#X# variant of \#newObjectFrom#.

::  getMethod: \#JClass -> MethodDescriptor p -> Java (Maybe (JMethod p))# \break
    Retrieve a method id from the Java monad.
    \#fail# if the method does not exist or can not be retrieved
    (e.g. \#Nothing#).

::  getStaticMethod: \#JClass -> MethodDescriptor p -> Java (Maybe (JStaticMethod p))# \break
    Retrieve a static method id from the Java monad.
    \#fail# if the method does not exist or can not be retrieved
    (e.g. \#Nothing#).
reset

    \#bindMethod# and \#bindStaticMethod# are convenience functions
    that can be used to directly retrieve a Haskell function \#b#
    from a \#MethodDescriptor p#. The will \#fail# in the Java monad
    (i.e. raise an ioError) if the method can not be retrieved, while
    \#getMethod# and \#getStaticMethod# will only fail in the monad \#m#
    (which may be the Maybe monad, or the error monad).    

small
::  bindMethod: \#MethodCall p b => JClass -> MethodDescriptor p -> Java (Maybe (JObject -> b))#

::  bindStaticMethod: \#MethodCall p b => JClass -> MethodDescriptor p -> Java (Maybe (JObject -> b))#

reset

=== Calling Methods

    Functions for calling methods.

small

::  callMethod: \#MethodCall p b => JMethod p -> JObject -> b# \break
    Call a method. \#JMethod p# must be retrieved using \#getMethod#.
    \#p# determines the type of the function \#b#.

::  callMethodE: \#MethodCallE p b => JMethod p -> JObject -> b# \break
    \#E# variant of \#newObjectFrom#.

::  callMethodX: \#MethodCallX p b => JMethod p -> JObject -> b# \break
    \#X# variant of \#newObjectFrom#.

::  callStaticMethod: \#StaticCall p b => JStaticMethod p -> JObject -> b# \break
    Call a static method. \#JStaticMethod p# must be retrieved using
    \#getStaticMethod#. \#p# determines the type of the function \#b#.

::  callStaticMethodE: \#StaticCallE p b => JStaticMethod p -> JObject -> b# \break
    \#E# variant of \#newObjectFrom#.

::  callStaticMethodX: \#StaticCallX p b => JStaticMethod p -> JObject -> b# \break
    \#X# variant of \#newObjectFrom#.

reset

=== Reading and Writing Fields

    Functions for reading and writing fields.

small

::  getField: \#Param a => JClass -> String -> a -> Java (Maybe (JField a))#

::  getStaticField: \#Param a => JClass -> String -> a -> Java (Maybe (JStaticField a))#

::  readField: \#Field a b => JField a -> JObject -> Java b#

::  writeField: \#Field a b => JField a -> JObject -> a -> Java ()#

::  readStaticField: \#Field a b => JStaticField a -> Java b#

::  writeStaticField: \#Field a b => JStaticField a -> a -> Java ()#


reset

=== Utlity Functions

small
::  isInstanceOf: \#JObject -> JClass -> Java Bool# \break
    Checks whether the \#JObject# is an instance of the given \#JClass#.
reset

=== Interaction with the IO Monad

small
::  io: \#IO a -> Java a# \break
    Execute an IO action within the Java monad.

.haskell
    runJava $ do
        ... java ...
        io $ putStrLn "Haskell IO"
        ... java ...

::  forkJava: \#Java a -> Java (JavaThreadId a)# \break
    This function forks a Java computation in a new Haskell thread
    and returns a \#JavaThreadId#. This is not a thread id by which
    Java knows a thread, but an object which can be used inside
    the Java monad to wait on a thread using \#waitJava#.

::  waitJava: \#JavaThreadId a -> Java (Either SomeException a)# \break
    Waits for a thread forked using \#forkJava#. If an exception
    occurred in that thread, it is returned as \#Left SomeException#.
    If not, the result of type \#a# is returned.

reset

